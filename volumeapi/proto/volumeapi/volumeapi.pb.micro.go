// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/volumeapi/volumeapi.proto

package volumeapi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Volumeapi service

func NewVolumeapiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Volumeapi service

type VolumeapiService interface {
	FindVolumeById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddVolume(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteVolumeById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateVolume(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 默认接口
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type volumeapiService struct {
	c    client.Client
	name string
}

func NewVolumeapiService(name string, c client.Client) VolumeapiService {
	return &volumeapiService{
		c:    c,
		name: name,
	}
}

func (c *volumeapiService) FindVolumeById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Volumeapi.FindVolumeById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeapiService) AddVolume(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Volumeapi.AddVolume", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeapiService) DeleteVolumeById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Volumeapi.DeleteVolumeById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeapiService) UpdateVolume(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Volumeapi.UpdateVolume", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeapiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Volumeapi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Volumeapi service

type VolumeapiHandler interface {
	FindVolumeById(context.Context, *Request, *Response) error
	AddVolume(context.Context, *Request, *Response) error
	DeleteVolumeById(context.Context, *Request, *Response) error
	UpdateVolume(context.Context, *Request, *Response) error
	// 默认接口
	Call(context.Context, *Request, *Response) error
}

func RegisterVolumeapiHandler(s server.Server, hdlr VolumeapiHandler, opts ...server.HandlerOption) error {
	type volumeapi interface {
		FindVolumeById(ctx context.Context, in *Request, out *Response) error
		AddVolume(ctx context.Context, in *Request, out *Response) error
		DeleteVolumeById(ctx context.Context, in *Request, out *Response) error
		UpdateVolume(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type Volumeapi struct {
		volumeapi
	}
	h := &volumeapiHandler{hdlr}
	return s.Handle(s.NewHandler(&Volumeapi{h}, opts...))
}

type volumeapiHandler struct {
	VolumeapiHandler
}

func (h *volumeapiHandler) FindVolumeById(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeapiHandler.FindVolumeById(ctx, in, out)
}

func (h *volumeapiHandler) AddVolume(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeapiHandler.AddVolume(ctx, in, out)
}

func (h *volumeapiHandler) DeleteVolumeById(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeapiHandler.DeleteVolumeById(ctx, in, out)
}

func (h *volumeapiHandler) UpdateVolume(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeapiHandler.UpdateVolume(ctx, in, out)
}

func (h *volumeapiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeapiHandler.Call(ctx, in, out)
}
