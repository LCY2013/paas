// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/middlewareapi/middlewareapi.proto

package middlewareapi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Middlewareapi service

func NewMiddlewareapiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Middlewareapi service

type MiddlewareapiService interface {
	FindMiddlewareById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteMiddlewareById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 默认接口
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type middlewareapiService struct {
	c    client.Client
	name string
}

func NewMiddlewareapiService(name string, c client.Client) MiddlewareapiService {
	return &middlewareapiService{
		c:    c,
		name: name,
	}
}

func (c *middlewareapiService) FindMiddlewareById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Middlewareapi.FindMiddlewareById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareapiService) AddMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Middlewareapi.AddMiddleware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareapiService) DeleteMiddlewareById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Middlewareapi.DeleteMiddlewareById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareapiService) UpdateMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Middlewareapi.UpdateMiddleware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareapiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Middlewareapi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Middlewareapi service

type MiddlewareapiHandler interface {
	FindMiddlewareById(context.Context, *Request, *Response) error
	AddMiddleware(context.Context, *Request, *Response) error
	DeleteMiddlewareById(context.Context, *Request, *Response) error
	UpdateMiddleware(context.Context, *Request, *Response) error
	// 默认接口
	Call(context.Context, *Request, *Response) error
}

func RegisterMiddlewareapiHandler(s server.Server, hdlr MiddlewareapiHandler, opts ...server.HandlerOption) error {
	type middlewareapi interface {
		FindMiddlewareById(ctx context.Context, in *Request, out *Response) error
		AddMiddleware(ctx context.Context, in *Request, out *Response) error
		DeleteMiddlewareById(ctx context.Context, in *Request, out *Response) error
		UpdateMiddleware(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type Middlewareapi struct {
		middlewareapi
	}
	h := &middlewareapiHandler{hdlr}
	return s.Handle(s.NewHandler(&Middlewareapi{h}, opts...))
}

type middlewareapiHandler struct {
	MiddlewareapiHandler
}

func (h *middlewareapiHandler) FindMiddlewareById(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareapiHandler.FindMiddlewareById(ctx, in, out)
}

func (h *middlewareapiHandler) AddMiddleware(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareapiHandler.AddMiddleware(ctx, in, out)
}

func (h *middlewareapiHandler) DeleteMiddlewareById(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareapiHandler.DeleteMiddlewareById(ctx, in, out)
}

func (h *middlewareapiHandler) UpdateMiddleware(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareapiHandler.UpdateMiddleware(ctx, in, out)
}

func (h *middlewareapiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareapiHandler.Call(ctx, in, out)
}
