// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/routeapi/routeapi.proto

package routeapi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Routeapi service

func NewRouteapiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Routeapi service

type RouteapiService interface {
	FindRouteById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteRouteById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 默认接口
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type routeapiService struct {
	c    client.Client
	name string
}

func NewRouteapiService(name string, c client.Client) RouteapiService {
	return &routeapiService{
		c:    c,
		name: name,
	}
}

func (c *routeapiService) FindRouteById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Routeapi.FindRouteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeapiService) AddRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Routeapi.AddRoute", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeapiService) DeleteRouteById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Routeapi.DeleteRouteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeapiService) UpdateRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Routeapi.UpdateRoute", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeapiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Routeapi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Routeapi service

type RouteapiHandler interface {
	FindRouteById(context.Context, *Request, *Response) error
	AddRoute(context.Context, *Request, *Response) error
	DeleteRouteById(context.Context, *Request, *Response) error
	UpdateRoute(context.Context, *Request, *Response) error
	// 默认接口
	Call(context.Context, *Request, *Response) error
}

func RegisterRouteapiHandler(s server.Server, hdlr RouteapiHandler, opts ...server.HandlerOption) error {
	type routeapi interface {
		FindRouteById(ctx context.Context, in *Request, out *Response) error
		AddRoute(ctx context.Context, in *Request, out *Response) error
		DeleteRouteById(ctx context.Context, in *Request, out *Response) error
		UpdateRoute(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type Routeapi struct {
		routeapi
	}
	h := &routeapiHandler{hdlr}
	return s.Handle(s.NewHandler(&Routeapi{h}, opts...))
}

type routeapiHandler struct {
	RouteapiHandler
}

func (h *routeapiHandler) FindRouteById(ctx context.Context, in *Request, out *Response) error {
	return h.RouteapiHandler.FindRouteById(ctx, in, out)
}

func (h *routeapiHandler) AddRoute(ctx context.Context, in *Request, out *Response) error {
	return h.RouteapiHandler.AddRoute(ctx, in, out)
}

func (h *routeapiHandler) DeleteRouteById(ctx context.Context, in *Request, out *Response) error {
	return h.RouteapiHandler.DeleteRouteById(ctx, in, out)
}

func (h *routeapiHandler) UpdateRoute(ctx context.Context, in *Request, out *Response) error {
	return h.RouteapiHandler.UpdateRoute(ctx, in, out)
}

func (h *routeapiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.RouteapiHandler.Call(ctx, in, out)
}
