// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/userapi/userapi.proto

package userapi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Userapi service

func NewUserapiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Userapi service

type UserapiService interface {
	FindUserById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddUser(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteUserById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateUser(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 默认接口
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type userapiService struct {
	c    client.Client
	name string
}

func NewUserapiService(name string, c client.Client) UserapiService {
	return &userapiService{
		c:    c,
		name: name,
	}
}

func (c *userapiService) FindUserById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userapi.FindUserById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userapiService) AddUser(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userapi.AddUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userapiService) DeleteUserById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userapi.DeleteUserById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userapiService) UpdateUser(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userapi.UpdateUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userapiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userapi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Userapi service

type UserapiHandler interface {
	FindUserById(context.Context, *Request, *Response) error
	AddUser(context.Context, *Request, *Response) error
	DeleteUserById(context.Context, *Request, *Response) error
	UpdateUser(context.Context, *Request, *Response) error
	// 默认接口
	Call(context.Context, *Request, *Response) error
}

func RegisterUserapiHandler(s server.Server, hdlr UserapiHandler, opts ...server.HandlerOption) error {
	type userapi interface {
		FindUserById(ctx context.Context, in *Request, out *Response) error
		AddUser(ctx context.Context, in *Request, out *Response) error
		DeleteUserById(ctx context.Context, in *Request, out *Response) error
		UpdateUser(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type Userapi struct {
		userapi
	}
	h := &userapiHandler{hdlr}
	return s.Handle(s.NewHandler(&Userapi{h}, opts...))
}

type userapiHandler struct {
	UserapiHandler
}

func (h *userapiHandler) FindUserById(ctx context.Context, in *Request, out *Response) error {
	return h.UserapiHandler.FindUserById(ctx, in, out)
}

func (h *userapiHandler) AddUser(ctx context.Context, in *Request, out *Response) error {
	return h.UserapiHandler.AddUser(ctx, in, out)
}

func (h *userapiHandler) DeleteUserById(ctx context.Context, in *Request, out *Response) error {
	return h.UserapiHandler.DeleteUserById(ctx, in, out)
}

func (h *userapiHandler) UpdateUser(ctx context.Context, in *Request, out *Response) error {
	return h.UserapiHandler.UpdateUser(ctx, in, out)
}

func (h *userapiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.UserapiHandler.Call(ctx, in, out)
}
