// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/appstore/appstore.proto

package appstore

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Appstore service

func NewAppstoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Appstore service

type AppstoreService interface {
	// 对外提供添加服务
	AddAppstore(ctx context.Context, in *AppstoreInfo, opts ...client.CallOption) (*Response, error)
	DeleteAppstore(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Response, error)
	UpdateAppstore(ctx context.Context, in *AppstoreInfo, opts ...client.CallOption) (*Response, error)
	FindAppstoreByID(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*AppstoreInfo, error)
	FindAllAppstore(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllAppstore, error)
	// 添加常用的接口
	AddInstallNum(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Response, error)
	GetInstallNum(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Number, error)
	AddViewNum(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Response, error)
	GetViewNum(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Number, error)
}

type appstoreService struct {
	c    client.Client
	name string
}

func NewAppstoreService(name string, c client.Client) AppstoreService {
	return &appstoreService{
		c:    c,
		name: name,
	}
}

func (c *appstoreService) AddAppstore(ctx context.Context, in *AppstoreInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Appstore.AddAppstore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appstoreService) DeleteAppstore(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Appstore.DeleteAppstore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appstoreService) UpdateAppstore(ctx context.Context, in *AppstoreInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Appstore.UpdateAppstore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appstoreService) FindAppstoreByID(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*AppstoreInfo, error) {
	req := c.c.NewRequest(c.name, "Appstore.FindAppstoreByID", in)
	out := new(AppstoreInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appstoreService) FindAllAppstore(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllAppstore, error) {
	req := c.c.NewRequest(c.name, "Appstore.FindAllAppstore", in)
	out := new(AllAppstore)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appstoreService) AddInstallNum(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Appstore.AddInstallNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appstoreService) GetInstallNum(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Number, error) {
	req := c.c.NewRequest(c.name, "Appstore.GetInstallNum", in)
	out := new(Number)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appstoreService) AddViewNum(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Appstore.AddViewNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appstoreService) GetViewNum(ctx context.Context, in *AppstoreId, opts ...client.CallOption) (*Number, error) {
	req := c.c.NewRequest(c.name, "Appstore.GetViewNum", in)
	out := new(Number)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Appstore service

type AppstoreHandler interface {
	// 对外提供添加服务
	AddAppstore(context.Context, *AppstoreInfo, *Response) error
	DeleteAppstore(context.Context, *AppstoreId, *Response) error
	UpdateAppstore(context.Context, *AppstoreInfo, *Response) error
	FindAppstoreByID(context.Context, *AppstoreId, *AppstoreInfo) error
	FindAllAppstore(context.Context, *FindAll, *AllAppstore) error
	// 添加常用的接口
	AddInstallNum(context.Context, *AppstoreId, *Response) error
	GetInstallNum(context.Context, *AppstoreId, *Number) error
	AddViewNum(context.Context, *AppstoreId, *Response) error
	GetViewNum(context.Context, *AppstoreId, *Number) error
}

func RegisterAppstoreHandler(s server.Server, hdlr AppstoreHandler, opts ...server.HandlerOption) error {
	type appstore interface {
		AddAppstore(ctx context.Context, in *AppstoreInfo, out *Response) error
		DeleteAppstore(ctx context.Context, in *AppstoreId, out *Response) error
		UpdateAppstore(ctx context.Context, in *AppstoreInfo, out *Response) error
		FindAppstoreByID(ctx context.Context, in *AppstoreId, out *AppstoreInfo) error
		FindAllAppstore(ctx context.Context, in *FindAll, out *AllAppstore) error
		AddInstallNum(ctx context.Context, in *AppstoreId, out *Response) error
		GetInstallNum(ctx context.Context, in *AppstoreId, out *Number) error
		AddViewNum(ctx context.Context, in *AppstoreId, out *Response) error
		GetViewNum(ctx context.Context, in *AppstoreId, out *Number) error
	}
	type Appstore struct {
		appstore
	}
	h := &appstoreHandler{hdlr}
	return s.Handle(s.NewHandler(&Appstore{h}, opts...))
}

type appstoreHandler struct {
	AppstoreHandler
}

func (h *appstoreHandler) AddAppstore(ctx context.Context, in *AppstoreInfo, out *Response) error {
	return h.AppstoreHandler.AddAppstore(ctx, in, out)
}

func (h *appstoreHandler) DeleteAppstore(ctx context.Context, in *AppstoreId, out *Response) error {
	return h.AppstoreHandler.DeleteAppstore(ctx, in, out)
}

func (h *appstoreHandler) UpdateAppstore(ctx context.Context, in *AppstoreInfo, out *Response) error {
	return h.AppstoreHandler.UpdateAppstore(ctx, in, out)
}

func (h *appstoreHandler) FindAppstoreByID(ctx context.Context, in *AppstoreId, out *AppstoreInfo) error {
	return h.AppstoreHandler.FindAppstoreByID(ctx, in, out)
}

func (h *appstoreHandler) FindAllAppstore(ctx context.Context, in *FindAll, out *AllAppstore) error {
	return h.AppstoreHandler.FindAllAppstore(ctx, in, out)
}

func (h *appstoreHandler) AddInstallNum(ctx context.Context, in *AppstoreId, out *Response) error {
	return h.AppstoreHandler.AddInstallNum(ctx, in, out)
}

func (h *appstoreHandler) GetInstallNum(ctx context.Context, in *AppstoreId, out *Number) error {
	return h.AppstoreHandler.GetInstallNum(ctx, in, out)
}

func (h *appstoreHandler) AddViewNum(ctx context.Context, in *AppstoreId, out *Response) error {
	return h.AppstoreHandler.AddViewNum(ctx, in, out)
}

func (h *appstoreHandler) GetViewNum(ctx context.Context, in *AppstoreId, out *Number) error {
	return h.AppstoreHandler.GetViewNum(ctx, in, out)
}
